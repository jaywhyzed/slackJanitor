// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jaywhyzed/slackJanitor/client (interfaces: HttpClientInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockHttpClientInterface is a mock of HttpClientInterface interface
type MockHttpClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHttpClientInterfaceMockRecorder
}

// MockHttpClientInterfaceMockRecorder is the mock recorder for MockHttpClientInterface
type MockHttpClientInterfaceMockRecorder struct {
	mock *MockHttpClientInterface
}

// NewMockHttpClientInterface creates a new mock instance
func NewMockHttpClientInterface(ctrl *gomock.Controller) *MockHttpClientInterface {
	mock := &MockHttpClientInterface{ctrl: ctrl}
	mock.recorder = &MockHttpClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpClientInterface) EXPECT() *MockHttpClientInterfaceMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockHttpClientInterface) Do(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockHttpClientInterfaceMockRecorder) Do(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpClientInterface)(nil).Do), arg0)
}
