// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jaywhyzed/slackJanitor/client (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	client "github.com/jaywhyzed/slackJanitor/client"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockClient) Execute(arg0 client.Request, arg1 interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockClientMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockClient)(nil).Execute), arg0, arg1)
}

// ExecuteOrDie mocks base method
func (m *MockClient) ExecuteOrDie(arg0 client.Request, arg1 interface{}) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteOrDie", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExecuteOrDie indicates an expected call of ExecuteOrDie
func (mr *MockClientMockRecorder) ExecuteOrDie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteOrDie", reflect.TypeOf((*MockClient)(nil).ExecuteOrDie), arg0, arg1)
}
